<?php
/**
 * Created by PhpStorm.
 * User: BaoHoang
 * Date: 7/5/2022
 * Time: 22:00
 */

namespace App\Utils\Caches;


use App\Common\RepositoryInterface;
use App\Common\SingletonPattern;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;

abstract class AbstractCacheDataUtil extends SingletonPattern
{
    protected $cacheKey;
    protected $data;
    protected $ttl;

    /* @var RepositoryInterface */
    protected $repository;
    protected $model;

    /**
     * AbstractCacheDataUtil constructor.
     * @param string $cacheKey
     * @param $repositoryClass
     * @param $model
     */
    protected function __construct(string $cacheKey, $repositoryClass, $model)
    {
        $this->cacheKey = $cacheKey;
        $this->ttl = 2 * 60 * 60;
        $this->data = [];
        $this->repository = App::make($repositoryClass);
        $this->model = $model;
        if (!$this->hasCachedData()) {
            try {
                $this->loadCacheData();
                $this->cacheData();
            } catch (\Exception $e) {
                Log::error($e);
            }
        } else {
            $this->data = $this->getCachedData();
        }
    }

    public function cacheData()
    {
        return Cache::put($this->cacheKey, json_encode($this->data), $this->ttl);
    }

    public function cacheKeyValueData()
    {
        foreach ($this->data as $key => $value) {
            if (!$this->putKeyValue($key, $value)) {
                return false;
            }
        }
        return Cache::put($this->cacheKey, '1', $this->ttl);
    }

    public static function getInstance()
    {
        return parent::getInstance(); // TODO: Change the autogenerated stub
    }

    public function loadCacheData()
    {
        $models = $this->repository->getAll();
        foreach ($models as $model) {
            $this->data[$model->name] = $model->value;
        }
    }

    public function putKeyValue($key, $value, $ttl = null)
    {
        return Cache::put("$this->cacheKey:$key", json_encode($value), $ttl ?? $this->ttl);
    }

    public function putValue($value, $ttl = null)
    {
        return Cache::put($this->cacheKey, json_encode($value), $ttl ?? $this->ttl);
    }

    public function putData()
    {
        return Cache::put($this->cacheKey, json_encode($this->data), $this->ttl);
    }

    public function getCachedData($default = [])
    {
        if (!Cache::has($this->cacheKey)) {
            return $default;
        }
        return json_decode(Cache::get($this->cacheKey), true);
    }

    public function getCachedValue($key, $default = [])
    {
        if (!Cache::has("$this->cacheKey:$key")) {
            return $default;
        }
        return json_decode(Cache::get("$this->cacheKey:$key"), true);
    }

    public function hasCachedData()
    {
        return Cache::has($this->cacheKey);
    }

    public function hasCachedValue($key)
    {
        return Cache::has("$this->cacheKey:$key");
    }

    public function clearCache()
    {
            return Cache::forget($this->cacheKey);
    }
}