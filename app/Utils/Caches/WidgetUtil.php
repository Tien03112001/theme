<?php
/**
 * Created by PhpStorm.
 * User: BaoHoang
 * Date: 5/26/2022
 * Time: 12:15
 */

namespace App\Utils\Caches;


use App\Models\Post;
use App\Models\Widget;
use App\Repository\WidgetRepositoryInterface;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Str;

class WidgetUtil extends AbstractCacheDataUtil
{

    public function __construct()
    {
        parent::__construct('widgets', WidgetRepositoryInterface::class, Widget::class);
    }

    /**
     * @return WidgetUtil
     */
    public static function getInstance()
    {
        return parent::getInstance(); // TODO: Change the autogenerated stub
    }


    public function loadCacheData()
    {
        if ($this->repository instanceof WidgetRepositoryInterface) {
            $widget = $this->repository->getAll();
            if ($widget instanceof Widget) {
                $this->data[$widget->id] = $widget->toArray();
            }
        }
    }

    public function cacheData()
    {
        return $this->cacheKeyValueData();
    }

    public static function render(Widget $widget)
    {
        $path = Config::get('view.paths.0');
        $viewFilename = $widget->name . '-' . $widget->id . "-" . hash('sha1', $widget->updated_at);
        $fullFilename = $path . "/cache/" . $viewFilename . ".blade.php";
        if (!file_exists($fullFilename)) {
            file_put_contents($fullFilename, html_entity_decode($widget->html));
        }
        $params = self::getViewData($widget->html);
        return view('cache.' . $viewFilename, $params)->render();
    }

    public static function getViewData($html)
    {
        $params = [];
        $xml = '<?xml encoding="utf-8" ?>';
        $doc = new \DOMDocument();
        @$doc->loadHTML($xml . $html);

        self::fillDynamicTable($doc, $params);
        self::fillPosts($doc, $params);

        return $params;
    }

    public static function fillDynamicTable(\DOMDocument $doc, &$params)
    {
        $divs = $doc->getElementsByTagName('dynamic');
        for ($i = 0; $i < $divs->length; $i++) {
            $div = $divs->item($i);
            $tableName = $div->getAttribute('name');
            $limit = $div->getAttribute('limit');
            $orderBy = $div->getAttribute('orderBy');

            $collection = collect(DynamicTableUtil::getInstance()->getCachedValue($tableName));

            if (isset($limit)) {
                $collection = $collection->take($limit);
            }

            if (isset($orderBy)) {
                $collection = $collection->sortBy([
                    preg_split('/\:/', $orderBy, 1)
                ]);
            }

            $rows = $collection->toArray();

            $params[preg_replace('/\W+/', '_', Str::lower($tableName))] = $rows;
        }
    }

    public static function fillPosts(\DOMDocument $doc, &$params)
    {
        $divs = $doc->getElementsByTagName('post');
        for ($i = 0; $i < $divs->length; $i++) {
            $div = $divs->item($i);
            $name = $div->getAttribute('name') ?? '';
            $limit = $div->getAttribute('limit');
            $search = $div->getAttribute('search');
            $categoryName = $div->getAttribute('categoryName');
            $orderBy = $div->getAttribute('orderBy');

            $query = (new Post())
                ->when(!empty($search), function (Builder $q) use ($search) {
                    return $q->where('name', 'like', '%' . $search . '%');
                })
                ->when(!empty($categoryName), function (Builder $q) use ($categoryName) {
                    return $q->whereHas('category', function ($q1) use ($categoryName) {
                        $q1->whereName($categoryName);
                    });
                })
                ->where('published', 1)
                ->limit($limit)
                ->with(['category', 'meta', 'article', 'tags', 'gallery'])
                ->withCount('comments');

            if (!empty($orderBy)) {
                $query = $query->orderBy(...preg_split('/\:/', $orderBy, 1));
            }
            $params[$name . '_posts'] = $query->get();
        }
    }
}