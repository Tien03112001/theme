<?php
/**
 * Created by PhpStorm.
 * User: BaoHoang
 * Date: 9/24/2022
 * Time: 02:28
 */

namespace App\Utils;


use App\Common\SingletonPattern;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use RdKafka\Conf as RdKafkaConf;
use RdKafka\Consumer as RdKafkaConsumer;
use RdKafka\Exception as RdKafkaException;
use RdKafka\KafkaErrorException;
use RdKafka\Producer as RdKafkaProducer;
use RdKafka\TopicConf as RdKafkaTopicConf;

class KafkaUtil extends SingletonPattern
{

    /* @var RdKafkaConf */
    protected $config;

    /**
     * @return KafkaUtil
     */
    public static function getInstance()
    {
        return parent::getInstance(); // TODO: Change the autogenerated stub
    }

    protected function __construct()
    {
        parent::__construct();
    }

    /**
     *  Set config for producer
     * @param mixed $connection
     * @param array $conf
     * @return KafkaUtil
     */
    public function setProduceConfig($connection, $conf = []): KafkaUtil
    {
        $this->config = new RdKafkaConf();
        $configs = array_merge(config("kafka.$connection.producers"), $conf);
        foreach ($configs as $key => $value) {
            if (isset($value)) {
                $this->config->set($key, $value);
            }
        }
        return $this;
    }

    /**
     * Set config for consumer
     * @param mixed $connection
     * @param array $conf
     * @return KafkaUtil
     */
    public function setConsumeConfig($connection, $conf = []): KafkaUtil
    {
        $this->config = new RdKafkaConf();
        $configs = array_merge(config("kafka.$connection.consumers"), $conf);
        foreach ($configs as $key => $value) {
            if (isset($value)) {
                $this->config->set($key, $value);
            }
        }
        return $this;
    }


    /**
     * Publish a message to kafka
     * @param string $topic
     * @param $message
     * @return bool
     * @throws RdKafkaException
     */
    public function produceMessage(string $topic, $message)
    {
        if (is_array($message)) {
            $message = json_encode($message, JSON_UNESCAPED_SLASHES);
        }
        if (!is_scalar($message)) {
            return false;
        }
        $producer = new RdKafkaProducer($this->config);
        $topic = $producer->newTopic($topic);
        $topic->produce(RD_KAFKA_PARTITION_UA, 0, $message);
        $producer->poll(0);
        $result = -1;
        for ($flushRetries = 0; $flushRetries < 10; $flushRetries++) {
            $result = $producer->flush(10000);
            if (RD_KAFKA_RESP_ERR_NO_ERROR === $result) {
                break;
            }
        }
        if (RD_KAFKA_RESP_ERR_NO_ERROR !== $result) {
            return false;
        }
        return true;
    }

    /**
     * Publish more messages to kafka
     * @param string $topic
     * @param $messages
     * @return bool
     * @throws KafkaErrorException
     * @throws RdKafkaException
     */
    public function produceMessages(string $topic, array $messages)
    {
        $this->config->set('transactional.id', Str::random(32));
        $producer = new RdKafkaProducer($this->config);
        $topic = $producer->newTopic($topic);
        try {
            $producer->initTransactions(10000);
            $producer->beginTransaction();
            foreach ($messages as $message) {
                if (is_array($message)) {
                    $message = json_encode($message, JSON_UNESCAPED_SLASHES);
                }
                if (is_scalar($message)) {
                    $topic->produce(RD_KAFKA_PARTITION_UA, 0, $message);
                }
                $producer->poll(0);
            }
            $producer->commitTransaction(10000);
            return true;
        } catch (KafkaErrorException $kafkaErrorException) {
            Log::error($kafkaErrorException);
            $producer->abortTransaction(10000);
            throw $kafkaErrorException;
        } catch (RdKafkaException $e) {
            Log::error($e);
            $producer->abortTransaction(10000);
            throw $e;
        }
    }

    /**
     * @param string $groupId
     * @param array $topics
     * @param array $closures
     * @return void
     * @throws \Exception
     */
    public function consume(string $groupId, array $topics, array $closures)
    {
        $this->config->set('group.id', $groupId);
        $consumer = new RdKafkaConsumer($this->config);
        $queue = $consumer->newQueue();


        foreach ($topics as $t) {
            $topicConf = new RdKafkaTopicConf();
            if (isset($t['configs'])) {
                foreach ($t['configs'] as $key => $value) {
                    if (isset($value)) {
                        $topicConf->set($key, $value);
                    }
                }
            }
            $topic = $consumer->newTopic($t['name'], $topicConf);
            foreach ($t['partitions'] as $p) {
                $topic->consumeQueueStart($p['partition'], $p['offset'], $queue);
            }
        }

        while (true) {
            $message = $queue->consume(120 * 1000);
            if (isset($message)) {
                switch ($message->err) {
                    case RD_KAFKA_RESP_ERR_NO_ERROR:
                        if (isset($closures['NO_ERROR'])) {
                            $closures['NO_ERROR']($message);
                            $consumer->poll(100);
                        }
                        break;
                    case RD_KAFKA_RESP_ERR__PARTITION_EOF:
                        if (isset($closures['NO_ERROR'])) {
                            $closures['PARTITION_EOF']($message);
                        }
                        break;
                    case RD_KAFKA_RESP_ERR__TIMED_OUT:
                        if (isset($closures['TIMED_OUT'])) {
                            $closures['TIMED_OUT']($message);
                        }
                        break;
                    default:
                        if (isset($closures['ERROR'])) {
                            $closures['ERROR'](new \Exception($message->errstr(), $message->err));
                        }
                        break;
                }
            }
        }
    }

}