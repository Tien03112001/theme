<?php
/**
 * Created by PhpStorm.
 * User: BaoHoang
 * Date: 8/30/2022
 * Time: 16:47
 */

namespace App\Utils;


use App\Models\JobPosting;
use App\Models\Post;
use App\Models\PostCategory;
use App\Models\Product;
use App\Models\ProductCategory;
use App\Models\StructureDataType;
use App\Repository\StructureDataTypeRepositoryInterface;
use App\Utils\Caches\AbstractCacheDataUtil;
use Illuminate\Support\Carbon;
use Illuminate\Support\Str;

class StructureDataUtil extends AbstractCacheDataUtil
{

    protected $itemConditionList = [
        'new' => 'https://schema.org/NewCondition',
        'used' => 'https://schema.org/UsedCondition',
        'refurbished' => 'https://schema.org/RefurbishedCondition',
        'damaged' => 'https://schema.org/DamagedCondition'
    ];

    protected $availabilityList = [
        'in_stock' => 'https://schema.org/InStock',
        'out_of_stock' => 'https://schema.org/OutOfStock',
        'online_only' => 'https://schema.org/OnlineOnly',
        'in_store_only' => 'https://schema.org/InStoreOnly',
        'pre_order' => 'https://schema.org/PreOrder',
        'pre_sale' => 'https://schema.org/PreSale',
        'limited' => 'https://schema.org/LimitedAvailability',
        'sold_out' => 'https://schema.org/SoldOut',
        'discontinued' => 'https://schema.org/SoldOut',
    ];

    /**
     * @return StructureDataUtil
     */
    public static function getInstance()
    {
        return parent::getInstance(); // TODO: Change the autogenerated stub
    }

    protected function __construct()
    {
        parent::__construct('data_structure_types', StructureDataTypeRepositoryInterface::class, StructureDataType::class);
    }

    public function loadCacheData()
    {
        if (($this->repository instanceof StructureDataTypeRepositoryInterface)) {
            $allTypes = $this->repository->get([], 'id:asc', ['properties']);

            $mapTypes = [];
            $mapChildrenTypes = [];
            foreach ($allTypes as $type) {
                if ($type instanceof StructureDataType) {
                    $mapChildrenTypes[$type->name] = [];
                    $mapTypes[$type->name] = $type;
                    foreach ($type->properties as $p) {
                        if ($p->value_type == 'structure_data') {
                            array_push($mapChildrenTypes[$type->name], $p->value);
                        }
                    }
                }
            }

            $count = 0;
            $types = [];
            while ($count < 100) {
                if (empty($mapChildrenTypes)) {
                    break;
                }
                foreach ($mapChildrenTypes as $key => $children) {
                    $newChildren = [];
                    if (count($children) == 0) {
                        unset($mapChildrenTypes[$key]);
                        if (isset($mapTypes[$key])) {
                            array_push($types, $mapTypes[$key]);
                        }
                        continue;
                    }
                    foreach ($children as $child) {
                        $p = isset($mapChildrenTypes[$child]) ? $mapChildrenTypes[$child] : [];
                        if (count($p) > 0) {
                            array_push($newChildren, $child);
                        }
                    }
                    $mapChildrenTypes[$key] = $newChildren;
                }
                $count++;
            }

            foreach ($types as $type) {
                if ($type instanceof StructureDataType) {
                    $properties = [];
                    foreach ($type->properties as $p) {
                        if (isset($p->value)) {
                            if ($p->value_type == 'text') {
                                $properties[$p->name] = $p->value;
                            } elseif ($p->value_type == 'select') {
                                $properties[$p->name] = $p->value;
                            } elseif ($p->value_type == 'url') {
                                if (filter_var($p->value, FILTER_VALIDATE_URL)) {
                                    $properties[$p->name] = $p->value;
                                }
                            } elseif ($p->value_type == 'file') {
                                $properties[$p->name] = $p->value;
                            } elseif ($p->value_type == 'array') {
                                $properties[$p->name] = explode(',', $p->value);
                            } elseif ($p->value_type == 'array_file') {
                                $properties[$p->name] = explode(',', $p->value);
                            } elseif ($p->value_type == 'json') {
                                $decode = json_decode($p->value, true);
                                if (isset($decode)) {
                                    $properties[$p->name] = $decode;
                                }
                            } elseif ($p->value_type == 'numeric') {
                                if (is_numeric($p->value)) {
                                    if (is_int($p->value)) {
                                        $properties[$p->name] = intval($p->value);
                                    } else {
                                        $properties[$p->name] = floatval($p->value);
                                    }
                                }
                            } elseif ($p->value_type == 'structure_data') {
                                $subProperties = $this->data[$p->value];
                                $subProperties['@type'] = $p->value;
                                $properties[$p->name] = $subProperties;
                                continue;
                            }
                        }
                    }
                    $this->data[$type->name] = $properties;
                }
            }
        }
    }

    public function cacheData()
    {
        return parent::cacheKeyValueData();
    }

    public function getArticle(Post $post)
    {
        $org = $this->getCachedValue('Organization');
        $sd = [
            '@context' => "https://schema.org",
            "@type" => "Article",
            "headline" => $post->article->title,
            "image" => [
                $post->image
            ],
            "datePublished" => Carbon::parse($post->created_at)->toDateString(),
            "dateModified" => Carbon::parse($post->updated_at)->toDateString(),
            "author" => [
                "@type" => "Organization",
                "name" => $org['name'] ?? null,
                "url" => $org['url'] ?? null,
            ],
            "publisher" => [
                "@type" => "Organization",
                "name" => $org['name'] ?? null,
                "url" => $org['url'] ?? null,
                'logo' => [
                    "@type" => "ImageObject",
                    "url" => $org['logo'] ?? null,
                ]
            ]
        ];
        return $this->responsePretty($sd);
    }

    public function getOrganization()
    {
        $properties = $this->getCachedValue('Organization', null);
        if (isset($properties)) {
            $properties['@context'] = "https://schema.org";
            return $this->responsePretty($properties);
        }
        return null;
    }

    public function getBreadcrumbOfPost(Post $post)
    {
        return $this->responsePretty([
            "@context" => "https://schema.org",
            "@type" => "BreadcrumbList",
            "itemListElement" => [
                [
                    "@type" => "ListItem",
                    "position" => 1,
                    "name" => "Trang chủ",
                    "item" => config('app.url')
                ],
                [
                    "@type" => "ListItem",
                    "position" => 2,
                    "name" => $post->category->name,
                    "item" => $post->category->full_path
                ],
                [
                    "@type" => "ListItem",
                    "position" => 3,
                    "name" => $post->article->title,
                    "item" => $post->full_path
                ],
            ]
        ]);
    }

    public function getBreadcrumbOfPostCategory(PostCategory $category)
    {

        return $this->responsePretty([
            "@context" => "https://schema.org",
            "@type" => "BreadcrumbList",
            "itemListElement" => [
                [
                    "@type" => "ListItem",
                    "position" => 1,
                    "name" => "Trang chủ",
                    "item" => config('app.url')
                ],
                [
                    "@type" => "ListItem",
                    "position" => 2,
                    "name" => $category->name,
                    "item" => $category->full_path
                ],
            ]
        ]);
    }

    public function getBreadcrumbOfProduct(Product $product)
    {
        return $this->responsePretty([
            "@context" => "https://schema.org",
            "@type" => "BreadcrumbList",
            "itemListElement" => [
                [
                    "@type" => "ListItem",
                    "position" => 1,
                    "name" => "Trang chủ",
                    "item" => config('app.url')
                ],
                [
                    "@type" => "ListItem",
                    "position" => 2,
                    "name" => $product->category->name,
                    "item" => $product->category->full_path
                ],
                [
                    "@type" => "ListItem",
                    "position" => 3,
                    "name" => $product->article->title,
                    "item" => $product->full_path
                ],
            ]
        ]);
    }

    public function getBreadcrumbOfProductCategory(ProductCategory $category)
    {

        return $this->responsePretty([
            "@context" => "https://schema.org",
            "@type" => "BreadcrumbList",
            "itemListElement" => [
                [
                    "@type" => "ListItem",
                    "position" => 1,
                    "name" => "Trang chủ",
                    "item" => config('app.url')
                ],
                [
                    "@type" => "ListItem",
                    "position" => 2,
                    "name" => $category->name,
                    "item" => $category->full_path
                ],
            ]
        ]);
    }

    public function getLocalBusiness()
    {
        $properties = $this->getCachedValue('LocalBusiness', null);
        if (isset($properties)) {
            $properties['@context'] = "https://schema.org";
            return $this->responsePretty($properties);
        }
        return null;
    }


    public function getProduct(Product $product)
    {
        $sd = [
            "@context" => "https://schema.org/",
            "@type" => "Product",
            "name" => $product->name,
            "image" => [
                $product->image
            ],
            "description" => HtmlUtil::extractContent($product->summary),
            "brand" => [
                "@type" => "Brand",
                "name" => $product->brand
            ],
            "offers" => [
                "@type" => "Offer",
                "url" => $product->full_path,
                "priceCurrency" => "USD",
                "price" => $product->sale_price,
                "itemCondition" => $this->itemConditionList[$product->item_condition ?? 'new'],
                "availability" => $this->availabilityList[$product->availability ?? 'in_stock']
            ],
        ];

        $article = $product->article;
        if (isset($article) && $article->comments && count($article->comments) > 0) {
            $sd['review'] = [];
            foreach ($article->comments as $comment) {
                array_push($sd['review'], [
                    '@type' => 'Review',
                    'reviewBody' => $comment->content,
                    'reviewRating' => [
                        '@type' => 'Rating',
                        'ratingValue' => $comment->rating
                    ],
                    'author' => [
                        '@type' => 'Person',
                        'name' => $comment->author
                    ],
                    'datePublished' => Carbon::parse($comment->updated_at)->toDateString()
                ]);
            }
        }
        return $this->responsePretty($sd);
    }

    public function getJobPosting(JobPosting $jobPosting)
    {
        $org = $this->getCachedValue('LocalBusiness');
        $postalAddress = $this->getCachedValue('PostalAddress');
        $sd = [
            "@context" => "https://schema.org/",
            "@type" => "JobPosting",
            "title" => $jobPosting->title,
            "description" => $jobPosting->description,
            "datePosted" => $jobPosting->date_posted,
            "validThrough" => $jobPosting->valid_through,
            "employmentType" => Str::upper($jobPosting->employment_type),
            "hiringOrganization" => $org,
            "jobLocation" => [
                "@type" => "Place",
                "address" => $postalAddress
            ],
            "baseSalary" => [
                "@type" => "MonetaryAmount",
                "currency" => Str::upper($jobPosting->unit_currency),
                "value" => [
                    "@type" => "QuantitativeValue",
                    "minValue" => $jobPosting->base_salary_min,
                    "maxValue" => $jobPosting->base_salary_max,
                    "unitText" => Str::upper($jobPosting->unit_time)
                ]
            ]
        ];
        return $this->responsePretty($sd);
    }

    private function responsePretty($arr)
    {
        return json_encode($arr, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
    }

}