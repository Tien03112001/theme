<?php
/**
 * Created by PhpStorm.
 * User: BaoHoang
 * Date: 10/28/2022
 * Time: 19:25
 */

namespace App\Utils;


use App\Common\SingletonPattern;
use App\Jobs\NotifyEmailJob;
use App\Models\FormData;
use App\Models\Order;
use App\Utils\Caches\AppSettingUtil;
use Illuminate\Support\Facades\Log;

class NotificationUtil extends SingletonPattern
{
    protected $ownerEmail;
    protected $token;
    protected $queue;

    /**
     * @return NotificationUtil
     */
    public static function getInstance()
    {
        return parent::getInstance(); // TODO: Change the autogenerated stub
    }

    public function __construct()
    {
        $appSettings = AppSettingUtil::getInstance()->getCachedData([]);
        if (isset($appSettings['Owner_Email'])) {
            $this->ownerEmail = $appSettings['Owner_Email'];
        }
        $this->token = config('api.token');
        $this->queue = 'notify_email';
    }

    private function notifyEmail($to, $content)
    {
        $data = [
            'token' => $this->token,
            'to' => $to,
            'content' => $content,
        ];
        NotifyEmailJob::dispatch($data)->onConnection('ezi')->onQueue($this->queue);
    }

    public function notifyOrderCreatedToCustomer(Order $order)
    {
        try {
            $content = view('theme.email.notify.customer.order_created', compact('order'))->render();
            $this->notifyEmail($order->customer_email, $content);
        } catch (\Exception $e) {
            Log::error($e);
        }
    }

    public function notifyOrderCreatedToOwner(Order $order)
    {
        try {
            if (isset($this->ownerEmail)) {
                $content = view('theme.email.notify.owner.order_created', compact('order'))->render();
                $this->notifyEmail($this->ownerEmail, $content);
            }
        } catch (\Exception $e) {
            Log::error($e);
        }
    }

    public function notifyFormSubmittedToOwner(FormData $formData)
    {
        try {
            if (isset($this->ownerEmail)) {
                $content = view('theme.email.notify.owner.form_submitted', compact('formData'))->render();
                $this->notifyEmail($this->ownerEmail, $content);
            }
        } catch (\Exception $e) {
            Log::error($e);
        }
    }

}